* Yarr
** Install npm modules
#+begin_src bash
cd to/where/you/cloned/this/repo
npm i
#+end_src

Take a sneek-peek at package.json.

- `devDependencies` have mostly webpack stuff, and babel. We are using babel to transpile ES6 to ES5.
- `dependencies` contain the modules we'll use in the tutorial.
  - babel-runtime

    It's required for using a number of ES6 features, and helps in general if our app is split across multiple files.

  - html2hscript

    We're building a RSS reader, right? So at the end of the day, we'll get HTML strings (the blog posts' content) that we'll want to show in our HTML, but we are using virtual-dom, so instead of just dropping in our document directly, we parse the HTML strings to virtual-dom hyperscript, and tell virtual-dom to do the rendering.
    This is what this module do. It parse html to virtual-dom hyperscript.

  - dexie

    Dexie is a wrapper for indexedDB which we'll use for offline storage of RSS feeds.

  - jquery

    We don't really use most of jquery. We don't really need any of jquery. But we'll use it in few places just to see how RxJS can interoperate with other libs like the mighty jquery.

  - rx

    That's our chief guest.

  - virtual-dom

    Deputy chief guest? Chief guest's assistant perhaps.

** Mic testing
Let's quickly write some boilerplate to check if our setup is working as it should.

- *Create /dist and /src*

  If you look in the webpack.config.js, you'll see following config:
 #+begin_src javascript
  entry: {
    app: ['./src/index.js']
  },
  output: {
    filename: 'dist/[name].js'
  },
 #+end_src

  This means that webpack will enter our app from `./src/index.js` file, and will output the js after all pre-processing it need to do to `./dist/app.js` file. Let's quickly create `dist` and `src` directories.

 #+begin_src bash
  mkdir src dist
  echo "console.log('hello world');" >> src/index.js
 #+end_src

- *Check webpack is working*

  Running following command should create `dist/app.js` file. If it does, our setup is working and we're good to go.
 #+begin_src bash
  webpack -p
 #+end_src

- *Create index.html*

  This is the only html file we'll write in this whole tutorial. Only an entry point for including our `dist/app.js` which'll take the wheel.
  #+begin_src xml
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8"/>
      <title>Yarr : Yet Another RSS Reader</title>
    </head>

    <body class="home-template">
      <script src="dist/app.js"></script>
    </body>
  </html>

  #+end_src

- *Check webpack-dev-server*

  We'll use webpack-dev-server for live-reloading. It can do more fancy tasks, but we'll not use 'em.
  Runnng following command should start the webpack server and we'll be able to see `hello world` logged to javascript console at http://localhost:8080

 #+begin_src bash
  webpack-dev-server
 #+end_src


If all is working well. We can move on to next step.

- *Checkout to next step*
 #+begin_src javascript
  git checkout 1-hello-rx
 #+end_src
